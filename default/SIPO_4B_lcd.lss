
SIPO_4B_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006f  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006d1  00000000  00000000  00000399  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001af  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004af  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000151  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000031f  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e6       	ldi	r30, 0x64	; 100
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 39       	cpi	r26, 0x92	; 146
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	e1 d0       	rcall	.+450    	; 0x20c <main>
  4a:	0a c1       	rjmp	.+532    	; 0x260 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <sipo_send>:
Date : 01-08-2014
											*/


void sipo_send(unsigned char var) // you may try to make these functions inline so that this might give a performance 
{									//boost by decreasing use of pointers and ram. but this will increase however increase
  4e:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  50:	34 e1       	ldi	r19, 0x14	; 20
									//size of the program, you have to keep that in mind.
	unsigned char i;
	
	for(i=0;i<8;i++)
	{
		if(var & (1<<7))
  52:	87 ff       	sbrs	r24, 7
  54:	02 c0       	rjmp	.+4      	; 0x5a <sipo_send+0xc>
		sipo |= (1<<spin);
  56:	c4 9a       	sbi	0x18, 4	; 24
  58:	01 c0       	rjmp	.+2      	; 0x5c <sipo_send+0xe>

		else 
		sipo &= ~(1<<spin);
  5a:	c4 98       	cbi	0x18, 4	; 24

		sipo |= (1<<clk);
  5c:	c5 9a       	sbi	0x18, 5	; 24
  5e:	93 2f       	mov	r25, r19
  60:	9a 95       	dec	r25
  62:	f1 f7       	brne	.-4      	; 0x60 <sipo_send+0x12>
		_delay_us(5); //can be reduced to 1us i have checked it
					//so our sipo clock is 1/10us that is 100khz speed
					//80 us delay for 1 byte
		sipo &= ~(1<<clk);
  64:	c5 98       	cbi	0x18, 5	; 24
  66:	93 2f       	mov	r25, r19
  68:	9a 95       	dec	r25
  6a:	f1 f7       	brne	.-4      	; 0x68 <sipo_send+0x1a>
void sipo_send(unsigned char var) // you may try to make these functions inline so that this might give a performance 
{									//boost by decreasing use of pointers and ram. but this will increase however increase
									//size of the program, you have to keep that in mind.
	unsigned char i;
	
	for(i=0;i<8;i++)
  6c:	2f 5f       	subi	r18, 0xFF	; 255
  6e:	28 30       	cpi	r18, 0x08	; 8
  70:	11 f0       	breq	.+4      	; 0x76 <sipo_send+0x28>
					//so our sipo clock is 1/10us that is 100khz speed
					//80 us delay for 1 byte
		sipo &= ~(1<<clk);
		_delay_us(5);

		var = var<<1;
  72:	88 0f       	add	r24, r24
  74:	ee cf       	rjmp	.-36     	; 0x52 <sipo_send+0x4>
  76:	08 95       	ret

00000078 <send_nibble>:
	}	

}

void send_nibble(unsigned char x)  //try to make this also inline if necessary
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
	x |= (1<<en); // set en pin as 1
  7e:	94 e0       	ldi	r25, 0x04	; 4
  80:	f9 2e       	mov	r15, r25
  82:	f8 2a       	or	r15, r24
	
	sipo_send(x); //send the data through sipo
  84:	8f 2d       	mov	r24, r15
  86:	e3 df       	rcall	.-58     	; 0x4e <sipo_send>
	
	sipo |= (1<<stb); //after sending enable the STROBE so that data is now available on the data pins
  88:	c3 9a       	sbi	0x18, 3	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	08 eb       	ldi	r16, 0xB8	; 184
  8c:	1b e0       	ldi	r17, 0x0B	; 11
  8e:	c8 01       	movw	r24, r16
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <send_nibble+0x18>

	_delay_ms(1); //give delay of 10ms for enable change clk
	
	sipo &= ~(1<<stb);//clear the strobe now
  94:	c3 98       	cbi	0x18, 3	; 24

	x &= ~(1<<en); // now make the enable pin of lcd as 0
		
	sipo_send(x); // again send new data in which only enable pins state of lcd is changed
  96:	8f 2d       	mov	r24, r15
  98:	8b 7f       	andi	r24, 0xFB	; 251
  9a:	d9 df       	rcall	.-78     	; 0x4e <sipo_send>
					
	sipo |= (1<<stb); //again set the strobe
  9c:	c3 9a       	sbi	0x18, 3	; 24
  9e:	c8 01       	movw	r24, r16
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <send_nibble+0x28>
	_delay_ms(1); //delay 10ms
	sipo &= ~(1<<stb); // clear the strobe
  a4:	c3 98       	cbi	0x18, 3	; 24


		//to send a nibble 2 * 80us + 2 * 1ms = 2.16ms total delay
}
  a6:	1f 91       	pop	r17
  a8:	0f 91       	pop	r16
  aa:	ff 90       	pop	r15
  ac:	08 95       	ret

000000ae <cmd>:

void cmd(unsigned char var)
{
  ae:	1f 93       	push	r17
  b0:	18 2f       	mov	r17, r24

//send higher nibble
	x = 0xf0 & var; //get higher nibble into x  
	
	x &= ~(1<<rs); 	//set the rs pin as 0
	send_nibble(x); //enable pin clocking mechanism is contained in nibble fucntion
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	e1 df       	rcall	.-62     	; 0x78 <send_nibble>

//now send lower nibble
	x = 0xf0 & (var<<4);   // now repeat same process for lower nibble
	
	x &= ~(1<<rs); 	
	send_nibble(x);
  b6:	81 2f       	mov	r24, r17
  b8:	82 95       	swap	r24
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	dd df       	rcall	.-70     	; 0x78 <send_nibble>
	
//to send a cmd or data byte delay is 2 * 2.16ms = 4.32ms

//so data rate is 1/4.32ms = 231 char's /second ; good enough for our display
}
  be:	1f 91       	pop	r17
  c0:	08 95       	ret

000000c2 <data>:




void data(unsigned char var)
{
  c2:	1f 93       	push	r17
  c4:	18 2f       	mov	r17, r24
	unsigned char x;

//send higher nibble
	x = 0xf0 & var;  
  c6:	80 7f       	andi	r24, 0xF0	; 240
	
	x |= (1<<rs); 	
	send_nibble(x);
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	d6 df       	rcall	.-84     	; 0x78 <send_nibble>

//now send lower nibble
	x = 0xf0 & (var<<4);  
  cc:	12 95       	swap	r17
  ce:	10 7f       	andi	r17, 0xF0	; 240
	
	x |= (1<<rs); 	
	send_nibble(x);
  d0:	81 2f       	mov	r24, r17
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	d1 df       	rcall	.-94     	; 0x78 <send_nibble>

	
}
  d6:	1f 91       	pop	r17
  d8:	08 95       	ret

000000da <lcd_init>:

void lcd_init()
{//proper initialization sequence
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	1f 93       	push	r17
  e0:	20 ed       	ldi	r18, 0xD0	; 208
  e2:	37 e0       	ldi	r19, 0x07	; 7
  e4:	4c e2       	ldi	r20, 0x2C	; 44
  e6:	51 e0       	ldi	r21, 0x01	; 1
  e8:	ca 01       	movw	r24, r20
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_init+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d1 f7       	brne	.-12     	; 0xe8 <lcd_init+0xe>
	_delay_ms(200); //wait until lcd's internal startup finished
	cmd(0x03);//first command
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	db df       	rcall	.-74     	; 0xae <cmd>
  f8:	28 e9       	ldi	r18, 0x98	; 152
  fa:	e2 2e       	mov	r14, r18
  fc:	2a e3       	ldi	r18, 0x3A	; 58
  fe:	f2 2e       	mov	r15, r18
 100:	c7 01       	movw	r24, r14
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <lcd_init+0x28>
	_delay_ms(5);
	cmd(0x03);//second command
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	d2 df       	rcall	.-92     	; 0xae <cmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10a:	18 ec       	ldi	r17, 0xC8	; 200
 10c:	81 2f       	mov	r24, r17
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_init+0x34>
	_delay_us(50);
	cmd(0x03);//third command
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	cc df       	rcall	.-104    	; 0xae <cmd>
 116:	81 2f       	mov	r24, r17
 118:	8a 95       	dec	r24
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_init+0x3e>
	_delay_us(50);
	cmd(0x02);//set 4 bit mode interface
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	c7 df       	rcall	.-114    	; 0xae <cmd>
 120:	81 2f       	mov	r24, r17
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_init+0x48>
	_delay_us(50);
	cmd(0x28);//the real function set command
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	c2 df       	rcall	.-124    	; 0xae <cmd>
 12a:	81 2f       	mov	r24, r17
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x52>
	_delay_us(50);
	cmd(0x08);//turn off display curcor, blink
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	bd df       	rcall	.-134    	; 0xae <cmd>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 134:	8c e2       	ldi	r24, 0x2C	; 44
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x5e>
	_delay_us(100);
	cmd(0x01);//clear display
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	b7 df       	rcall	.-146    	; 0xae <cmd>
 140:	c7 01       	movw	r24, r14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x68>
	_delay_ms(5);//allow enough time to write zeros to the whole ddram and cgram
	cmd(0x06);//entry mode set
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	b2 df       	rcall	.-156    	; 0xae <cmd>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 14a:	81 2f       	mov	r24, r17
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x72>
	_delay_us(50);
	cmd(0x0e);//turn on display with 1DCB
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	ad df       	rcall	.-166    	; 0xae <cmd>
 154:	81 2f       	mov	r24, r17
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x7c>
	_delay_us(50);
	cmd(0x80);//set ddram address
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	a8 df       	rcall	.-176    	; 0xae <cmd>
 15e:	1a 95       	dec	r17
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_init+0x84>
	_delay_us(50);
}
 162:	1f 91       	pop	r17
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	08 95       	ret

0000016a <print>:



void print(char* sym,unsigned char startadd)
{
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	7c 01       	movw	r14, r24
 17c:	16 2f       	mov	r17, r22
	unsigned char i=0;

	if(startadd<0x80 || startadd>0xcf)
 17e:	86 2f       	mov	r24, r22
 180:	80 58       	subi	r24, 0x80	; 128
 182:	80 35       	cpi	r24, 0x50	; 80
 184:	20 f5       	brcc	.+72     	; 0x1ce <print+0x64>
		return;
	else 
		cmd(startadd);
 186:	86 2f       	mov	r24, r22
 188:	92 df       	rcall	.-220    	; 0xae <cmd>
 18a:	00 e0       	ldi	r16, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	3c e2       	ldi	r19, 0x2C	; 44
 18e:	c3 2e       	mov	r12, r19
 190:	31 e0       	ldi	r19, 0x01	; 1
 192:	d3 2e       	mov	r13, r19
 194:	16 c0       	rjmp	.+44     	; 0x1c2 <print+0x58>

	while(sym[i]!='\0')
	{

		if(startadd==0x90)
 196:	10 39       	cpi	r17, 0x90	; 144
 198:	21 f4       	brne	.+8      	; 0x1a2 <print+0x38>
		{
				cmd(0xc0);
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	88 df       	rcall	.-240    	; 0xae <cmd>
 19e:	10 ec       	ldi	r17, 0xC0	; 192
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <print+0x50>
				startadd=0xc0;
		}
		else if(startadd==0xD0)
 1a2:	10 3d       	cpi	r17, 0xD0	; 208
 1a4:	51 f4       	brne	.+20     	; 0x1ba <print+0x50>
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	f6 01       	movw	r30, r12
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <print+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <print+0x40>
		{
			_delay_ms(2000);// delay so that before clearing lcd data can be read
			cmd(0x01);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	7b df       	rcall	.-266    	; 0xae <cmd>
 1b8:	10 e8       	ldi	r17, 0x80	; 128
			startadd=0x80;
		}
	
		data(sym[i]);
 1ba:	88 81       	ld	r24, Y
 1bc:	82 df       	rcall	.-252    	; 0xc2 <data>
		i++;
 1be:	0f 5f       	subi	r16, 0xFF	; 255
		startadd++;
 1c0:	1f 5f       	subi	r17, 0xFF	; 255
	if(startadd<0x80 || startadd>0xcf)
		return;
	else 
		cmd(startadd);

	while(sym[i]!='\0')
 1c2:	e7 01       	movw	r28, r14
 1c4:	c0 0f       	add	r28, r16
 1c6:	d1 1d       	adc	r29, r1
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	21 f7       	brne	.-56     	; 0x196 <print+0x2c>
		data(sym[i]);
		i++;
		startadd++;
	}

}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	08 95       	ret

000001e0 <lcd_print>:

void lcd_print(char* msg,...)
{
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ea:	3e 81       	ldd	r19, Y+6	; 0x06
	int x;
	va_list arg_list;//declare "arg_list" a variable of type va_list
	va_start(arg_list,msg);//initialize the variable with "va_start" which takes 
							//two arguments the list and first argument in this function		
	x=va_arg(arg_list,int);//when va_arg is called with the argument of list and a datatype 
 1ec:	6f 81       	ldd	r22, Y+7	; 0x07
 1ee:	78 85       	ldd	r23, Y+8	; 0x08
						// it returns next value of that type in the list if it exists
						//if it doesn't exist if returns NULL or 0 (tested in Turbo C)
	if(x>=0x80 && x<=0xcf)//so i don't want to check because i only want one argument to be
 1f0:	cb 01       	movw	r24, r22
 1f2:	80 58       	subi	r24, 0x80	; 128
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	80 35       	cpi	r24, 0x50	; 80
 1f8:	91 05       	cpc	r25, r1
 1fa:	10 f4       	brcc	.+4      	; 0x200 <lcd_print+0x20>
	print(msg,x);	//optional so i directly get the address and specify which should be
 1fc:	c9 01       	movw	r24, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <lcd_print+0x24>
						//the next argument in the calling function(caller)
	
	else
	print(msg,0x80);
 200:	c9 01       	movw	r24, r18
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	b2 df       	rcall	.-156    	; 0x16a <print>

	va_end(arg_list); //clear the memory used by arg_list variable
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <main>:

int main()
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
	DDRB = (1<<stb) | (1<<clk) | (1<<spin);
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	87 bb       	out	0x17, r24	; 23

	lcd_init();
 218:	60 df       	rcall	.-320    	; 0xda <lcd_init>
	data('a');
 21a:	81 e6       	ldi	r24, 0x61	; 97
 21c:	52 df       	rcall	.-348    	; 0xc2 <data>
	data('b');
 21e:	82 e6       	ldi	r24, 0x62	; 98
 220:	50 df       	rcall	.-352    	; 0xc2 <data>
	data('c');
 222:	83 e6       	ldi	r24, 0x63	; 99
 224:	4e df       	rcall	.-356    	; 0xc2 <data>
 226:	80 e2       	ldi	r24, 0x20	; 32
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	2c e2       	ldi	r18, 0x2C	; 44
 22c:	31 e0       	ldi	r19, 0x01	; 1
 22e:	f9 01       	movw	r30, r18
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 234:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	d9 f7       	brne	.-10     	; 0x22e <main+0x22>
	_delay_ms(2000);
	while(1)
	{
	
		lcd_print("This is a true 3 wire serial LCD driver mechanism");
 238:	00 e6       	ldi	r16, 0x60	; 96
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	cc e2       	ldi	r28, 0x2C	; 44
 23e:	d1 e0       	ldi	r29, 0x01	; 1
 240:	00 d0       	rcall	.+0      	; 0x242 <main+0x36>
 242:	ed b7       	in	r30, 0x3d	; 61
 244:	fe b7       	in	r31, 0x3e	; 62
 246:	12 83       	std	Z+2, r17	; 0x02
 248:	01 83       	std	Z+1, r16	; 0x01
 24a:	ca df       	rcall	.-108    	; 0x1e0 <lcd_print>
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	9e e4       	ldi	r25, 0x4E	; 78
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	fe 01       	movw	r30, r28
 256:	31 97       	sbiw	r30, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25c:	d9 f7       	brne	.-10     	; 0x254 <main+0x48>
 25e:	f0 cf       	rjmp	.-32     	; 0x240 <main+0x34>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
